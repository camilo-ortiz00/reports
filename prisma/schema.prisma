generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int      @id @default(autoincrement())
  name                   String
  email                  String   @unique
  date                   String?
  phone                  String?
  password               String
  role_id                Int
  address                String?
  cv_file                String?
  academic_support_files String?
  id_file                String?
  profile_picture        String?
  work_lines             String?
  contact_person_name    String?
  contact_person_phone   String?
  contact_person_email   String?
  blood_type             String?
  identity_document      String   @unique
  marital_status         String?
  profile_status         Float?
  reports                Report[]
  role                   Role     @relation(fields: [role_id], references: [id])
  component              Component[]
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  users       User[]
}

model Project {
  id           Int       @id @default(autoincrement())
  component_id Int
  name         String
  description  String
  component    Component @relation(fields: [component_id], references: [id])
  reports      Report[]
}

model Component {
  id          Int       @id @default(autoincrement())
  user_id     Int       // Llave foránea para el usuario asignado
  project_id  Int?
  name        String
  description String
  projects    Project[]
  user        User      @relation(fields: [user_id], references: [id]) 
}


model Report {
  id               Int               @id @default(autoincrement())
  project_id       Int
  user_id          Int
  status           Float?
  summary          String?
  annexes          Annex[]
  deliverables     Deliverable[]
  project          Project           @relation(fields: [project_id], references: [id])
  user             User              @relation(fields: [user_id], references: [id])
  trackings        ReportTracking[]
  technicalSummary TechnicalSummary[]
}

model ReportTracking {
  id         Int      @id @default(autoincrement())
  report_id  Int
  status     Int
  updated_at DateTime
  note       String
  report     Report   @relation(fields: [report_id], references: [id])
}

model TechnicalSummary {
  id                  Int                @id @default(autoincrement())
  report_id           Int
  name_technical      String            
  obtained_result     String
  product_description String
  observations        String
  support_annex_id    Int?               // Este campo puede ser opcional
  report              Report              @relation(fields: [report_id], references: [id], onDelete: Cascade)
  support_annex       Annex?             @relation(fields: [support_annex_id], references: [id]) // Relación opcional
}

model Deliverable {
  id                  Int                @id @default(autoincrement())
  report_id           Int
  description         String
  date                String
  approved_changes    String
  contingency_plan    String
  support_annex       String              @default("Sin soporte")
  report              Report              @relation(fields: [report_id], references: [id], onDelete: Cascade)
}

model Annex {
  id                  Int                @id @default(autoincrement())
  report_id           Int
  description         String
  file                Bytes
  report              Report              @relation(fields: [report_id], references: [id], onDelete: Cascade)
  technicalSummaries  TechnicalSummary[] 
}
